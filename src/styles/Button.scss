/**BUTTON**/

//Variables, fonts, mixins
@import "./import.scss";

//Base element
$element: Button;

//Styles par defaut
    //element
    .apc#{$element}{
        border-style: solid;
        border-width: 1px;
        box-sizing: border-box;
        cursor: pointer;
        display: inline-block;
        margin: 0 0 0 0;
        max-width: 100%;
        outline: none;
        transition-duration: 0.3s;
        transition-property: all;
    }

//Block
    //element
    .apc#{$element}Block{
        display: block;
        width: 100%;
    }

//Disabled
    //element
    .apc#{$element}Disabled{
        cursor: not-allowed;
        opacity: $disabledOpacity;
    }

//Rounded
    //element
    .apc#{$element}Rounded{
        border-radius: $borderRadius;
    }

//RoundedMax
    //element
    .apc#{$element}RoundedMax{
        border-radius: $borderRadiusMax;
    }

//Sizes
@each $sizeName, $sizeMap in $sizes {

    //element
    .apc#{$element}#{$sizeName}{
        font-size: map-get($sizeMap, font-size);
        height: map-get($sizeMap, height);
        padding-top: map-get($sizeMap, padding-top);
        padding-bottom:  map-get($sizeMap, padding-bottom);
        padding-left: map-get($sizeMap, padding-left);
        padding-right: map-get($sizeMap, padding-right);
    };

    //icon
    .apc#{$element}Icon#{$sizeName}{
        font-size: map-get($sizeMap, font-size);
    };
}

//Colors
@each $colorName, $color in $colors{
    
    //Button default
    @if( $colorName == Default ){

        //element
        .apc#{$element}#{$colorName}{
            background-color: map-get($colors,White);
            border-color: $color;
            color: lighten( map-get($colors,TextColor), $primaryTextOpacity);
            &:hover{
                background-color: darken(map-get($colors,White), 10%);
                border-color: darken($color, 15%);
            }
        }

        //icon
        .apc#{$element}Icon#{$colorName}{
            color: lighten(map-get($colors,TextColor), $primaryTextOpacity);
        }

    } @else{

        //element
        .apc#{$element}#{$colorName}{
            background-color: $color;
            border-color: darken($color, 5%);
            color: apcTextColor($color);
            &:hover{
                background-color: darken($color, 10%);
                border-color: darken($color, 15%);
                color: apcTextColor(darken($color, 10%));
            }
        }

        //icon
        .apc#{$element}Icon#{$colorName}{
            color: apcTextColor($color);
        }
        .apc#{$element}#{$colorName}{
            &:hover .apc#{$element}Icon#{$colorName}{
                color: apcTextColor(darken($color, 10%));
            }
        }

    }
}

//Colors Hollow
@each $colorName, $color in $colors{
    
    //Button default
    @if( $colorName == Default ){

        //element
        .apc#{$element}#{$colorName}Hollow{
            background-color: map-get($colors,White);
            border-color: $color;
            color: lighten(map-get($colors,TextColor), $primaryTextOpacity);
            &:hover{
                background-color: darken(map-get($colors,White), 10%);
                border-color: darken($color, 15%);
            }
        }

        //icon
        .apc#{$element}Icon#{$colorName}Hollow{
            color: lighten(map-get($colors,TextColor), $primaryTextOpacity);
        }

    } @else{

        //element
        .apc#{$element}#{$colorName}Hollow{
            background-color: map-get($colors,White);
            border-color: $color;
            color: $color;
            &:hover{
                background-color: $color;
                color: apcTextColor($color);
            }
        }

        //icon
        .apc#{$element}Icon#{$colorName}Hollow{
            color: $color;
        } 
        .apc#{$element}#{$colorName}Hollow{
            &:hover .apc#{$element}Icon#{$colorName}Hollow{
                color: apcTextColor($color);
            }
        }
    }
}